@page "/person/{PersonId:int}"
@page "/person/{PersonId:int}/{PersonName}"
@inject IPersonRepository _personRepository
@inject IMoviesRepository _moviesRepository 

@if (model == null)
{
    <text>Loading...</text>
}
else
{
    <h2>@model.Name (@model.DateOfBirth.Value.ToString("yyyy"))</h2>
    <img style="width: 200px;" src="@model.Picture" alt="Picture" class="actor-poster" />
    <h4>Movies: </h4>
    <MoviesList Movies="actorsMovies" />

    @*for (int i = 0; i < model.MoviesActors.Count(); i++)
        {
            if (i < model.MoviesActors.Count - 1)
            {
                @model.MoviesActors[i].Movie.Title<text>, </text>
            }
            else
            {
                @model.MoviesActors[i].Movie.Title
            }
        }*@

    @*<text> | </text> <span>@model.Movie.ReleaseDate.Value.ToString("dd MMM yyyy")</span>

        <div style="display: flex">
            <span style="display: inline-block; margin-right: 5px;"><img src="@model.Movie.Poster" style="width: 225px; height: 315px" /></span>
            <iframe width="560" height="315" src="https://www.youtube.com/embed/@model.Movie.Trailer" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
        </div>
        <div style="margin-top: 10px;">
            <h3>Summary</h3>
            <div>
                <RenderMarkdown MarkdownContent="@model.Movie.Summary" />
            </div>
        </div>
        <div style="margin-top: 10px;">
            <h3>Actors</h3>
            <div style="display: flex; flex-direction: column;">
                @foreach (var actor in model.Actors)
                {
                    <div style="margin-bottom: 2px;">
                        <img style="width: 50px;" src="@actor.Picture" />
                        <span style="display: inline-block; width: 200px;"><a href="/person/@actor.Id/@actor.Name.Replace(" ","-")">@actor.Name</a></span>
                        <span style="display: inline-block; width: 45px;">...</span>
                        <span>@actor.Character</span>
                    </div>
                }
            </div>
        </div>*@
}

@code {
    [Parameter] public int PersonId { get; set; }
    [Parameter] public string PersonName { get; set; }
    private List<MoviesActors> moviesActors = new List<MoviesActors>();
    private List<Movie> actorsMovies = new List<Movie>();
    Person model;

    protected async override Task OnInitializedAsync()
    {
        model = await _personRepository.GetPersonById(PersonId);
        var response = await _moviesRepository.GetIndexPageDTO();

        if(response != null)
        {
            var result = response.InTheaters.Concat(response.UpComingReleases).ToList();

            List<DetailsMovieDTO> allMovies = new List<DetailsMovieDTO>();

            foreach (var item in result)
            {
                allMovies.Add(await _moviesRepository.GetDetailMovieDTO(item.Id));
            }

            var actors = allMovies.SelectMany(x => x.Actors).ToList();



            Console.WriteLine("reult count: " + result.Count());

            foreach (var item in response.InTheaters)
            {
                Console.WriteLine("Movies inthearters: " + item.Title);
                Console.WriteLine("Movies inthearters ID: " + item.Id);
                Console.WriteLine("Movies inthearters actor: " + item.MoviesActors.FirstOrDefault());
                Console.WriteLine("Movies inthearters in theaters: " + item.InTheaters);
                Console.WriteLine("Movies inthearters genres: " + item.MoviesGenres.FirstOrDefault());
            }
            foreach (var item in response.UpComingReleases)
            {
                Console.WriteLine("Movies Upcoming: " + item.Title);
            }

            var mo = result.Where(x => x.MoviesActors.Any()).ToList();

            Console.WriteLine("mo : " + mo.Count());

            var MA = response.InTheaters.Select(x => x.MoviesActors).SelectMany(y => y).ToList();
            var MA2 = response.UpComingReleases.Select(x => x.MoviesActors).SelectMany(y => y).ToList();

            List<MoviesActors> M = MA.Concat(MA2).ToList();

            Console.WriteLine("List count: " + M.Count());

            if (M != null)
            {
                foreach (var actor in M)
                {
                    Console.WriteLine("actor: " + actor.Movie);
                    if (actor.PersonId == PersonId)
                    {
                        Console.WriteLine("Person: " + actor.Person.Name);
                        actorsMovies.Add(actor.Movie);
                    }
                }
            }
        }


        //List<MoviesActors> M = MA.AddRange(MA2);

        //var result2 = MA.Where(x => x.Contains(PersonId));
        //var result = response.InTheaters.Where(x => x.MoviesActors.Select(x => x.PersonId == PersonId).ToList());

        //actorsMovies = response.InTheaters.Join(response.UpComingReleases.Where(x => x.MoviesActors.Contains));

        Console.WriteLine($"The Id of the person is: {PersonId}");
        Console.WriteLine($"The name of the person is: {PersonName}");
        Console.WriteLine($"The count of the moviesActors is: {actorsMovies.Count}");
    }
}
